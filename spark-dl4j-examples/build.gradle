apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = 'examples.cnn.ImagesClassification'

applicationDefaultJvmArgs = ["-Xmx12288m", "-Dfile.encoding=UTF-8"]

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8

version = '1.0'

def isWin = 0 <= System.getProperty('os.name').indexOf('Windows')

repositories {
    mavenCentral()
}

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

configurations {
    all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'
}

dependencies {	
	compile 'org.slf4j:slf4j-log4j12:1.7.21'
	
	compile 'org.apache.spark:spark-core_2.11:1.6.1'
	compile 'org.apache.spark:spark-sql_2.11:1.6.1'
	compile 'org.apache.spark:spark-mllib_2.11:1.6.1'
	compile 'org.apache.spark:spark-yarn_2.11:1.6.1'	
		
	compile 'com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.3'
	compile 'org.nd4j:nd4j-native:0.4-rc3.10'
	if (isWin) {
		compile 'org.nd4j:nd4j-native:0.4-rc3.10:windows-x86_64'
	} else {//suppose it's linux
		compile 'org.nd4j:nd4j-native:0.4-rc3.10:linux-x86_64'
	}

	compile 'org.deeplearning4j:dl4j-spark_2.11:0.4-rc3.10' 
}



if (isWin) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                // Build the Class-Path for absolute paths based on runtime dependencies.
                attributes "Class-Path": configurations.runtime.files.collect {
                    it.toURL().toString().replaceFirst(/file:\/+/, '/')
                }.join(' ')
            }
        }

        // assetCompile will be execute for all Jar-type tasks
        // (see https://github.com/bertramdev/asset-pipeline/blob/master/asset-pipeline-gradle/src/main/groovy/asset/pipeline/gradle/AssetPipelinePlugin.groovy#L85)
        // at least exclude the assets from pathing jar
        exclude { it.file.absolutePath.contains('assetCompile') }
    }
}

run {
    if (project.hasProperty('main')) {
        main(project.main)
    }

    if (isWin) {
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }
}